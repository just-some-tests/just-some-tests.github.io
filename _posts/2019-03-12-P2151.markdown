---
layout: post
title:  "P2151 [SDOI2009]HH去散步"
date:   2019-03-12 17:54:05
categories: 洛谷
---
## 解题思路
首先，我们要按边转移，把每个点看作一条有向边所指的地方，这样我们就可以通过查看这条边是否和上一条边是来自同一个无向边（检查编号）来构建一个转移矩阵；

## 易错误区

因为要异或，所以计数器要从0或2开始；

找边的关系的时候直接暴力枚举；

记得构造初始矩阵，表示从原点可以到达的边；

乘起来，正确统计答案；

## 代码展示

```cpp
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<string>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<list>
#include<queue>
#include<stack>
#include<bitset>
#include<deque>
using namespace std;
#define ll long long
#define inf 0x3f3f3f3f
#define ri register int
#define il inline
#define fi first
#define se second
#define mp make_pair
#define pi pair<int,int>
#define mem0(x) memset((x),0,sizeof (x))
#define mem1(x) memset((x),0x3f,sizeof (x))
il char gc() {
    static const int BS = 1 << 22;
    static unsigned char buf[BS], *st, *ed;
    if (st == ed) ed = buf + fread(st = buf, 1, BS, stdin);
    return st == ed ? EOF : *st++;
}
#define gc getchar
template<class T>void in(T &x)
{
    x = 0; bool f = 0; char c = gc();
    while (c < '0' || c > '9') {if (c == '-') f = 1; c = gc();}
    while ('0' <= c && c <= '9') {x = (x << 3) + (x << 1) + (c ^ 48); c = gc();}
    if (f) x = -x;
}
#undef gc
void out(int x) {
    if (x < 0) putchar('-'), x = -x;
    if (x > 9) out(x / 10);
    putchar(x % 10 + '0');
}
#define N 130
#define M 130
int n, m, d, st, en;
int v[M], u[M];
int cnt = 1;
il void add(int uu, int vv) {
    u[++cnt] = uu, v[cnt] = vv;
}
#define Maxsz 130
#define md 45989
il void mod(int &x) {
    while (x > md) x -= md;
    while (x < 0) x += md;
}
struct Mat {
    int sz;
    int m[Maxsz][Maxsz];
    il void clear() {mem0(m);}
    Mat () {sz = 0; clear();}
    int* operator[](int x) {
        return this->m[x];
    }
    Mat operator*(const Mat &x)const {
        Mat res; res.sz = sz;
        for (ri i = 1; i <= sz; i++) {
            for (ri k = 1; k <= sz; k++) {
                for (ri j = 1; j <= sz; j++)
                    mod(res.m[i][j] += m[i][k] * x.m[k][j] % md);
            }
        }
        return res;
    }
    void operator*=(const Mat &x) {
        *this = (*this) * x;
    }
    void operator+=(const Mat &x) {
        for (ri i = 1; i <= sz; ++i) {
            for (ri j = 1; j <= sz; ++j) {
                mod(m[i][j] += x.m[i][j]);
            }
        }
    }
    Mat operator+(const Mat &x)const {
        Mat res = *this;
        res += x;
        return res;
    }
    void print() {
        for (ri i = 1; i <= sz; i++) {
            for (ri j = 1; j <= sz; j++)
                printf("%lld ", m[i][j]);
            puts("");
        }
        puts("*****************");
    }
    void toe() {
        clear();
        for (ri i = 1; i <= sz; i++)
            m[i][i] = 1;
    }
    Mat qpow(int x) {
        Mat res = *this, mul = res; x--;
        for (; x; x >>= 1, mul *= mul) if (x & 1) res *= mul;
        return res;
    }
} g, s,e;
ll ans;
signed main() {
    in(n), in(m), in(d), in(st), in(en);
    for (ri i = 1, x, y; i <= m; ++i) {
        in(x), in(y);
        add(x, y);
        add(y, x);
    }
    e.sz=s.sz = g.sz = cnt+1;
    for (ri i = 2; i <= cnt; ++i) {
        if (u[i] == st) {
            /*for(ri j=1;j<=cnt;++j){
                s.m[i][j]=1;
            }*/
            s.m[1][i]=1;
        }
        for (ri j = 2; j <= cnt; ++j) {
            if (v[i] == u[j] && (i ^ 1) != j) g.m[i][j] += 1;
        }
    }
    //s.print();g.print();
    g = g.qpow(d - 1);
    //g.print();
    for(ri i=2;i<=cnt;++i){
        for(ri j=2;j<=cnt;++j){
            (e.m[1][i]+=s.m[1][j]*g.m[j][i])%=md;
        }
    }
    //e.print();
    for (ri i = 2; i <= cnt; ++i) {
        if (v[i] == en) (ans += e.m[1][i]) %= md;//,cout<<"A"<<i;
    }
    printf("%lld", ans);
    return 0;
}
```
